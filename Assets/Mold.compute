#pragma kernel Update

struct Agent {
	float2 position;
	float angle;
};

RWTexture2D<float4> trailMap;

RWStructuredBuffer<Agent> agents;
uint agentsLength;

float deltaTime;

int width;
int height;
uint speed;

uint hash(uint state)
{
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}

float scaleToRange01(uint state)
{
	return state / 4294967295.0;
}

[numthreads(16, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= agentsLength)
		return;

	Agent agent = agents[id.x];


	float2 direction = float2(cos(agent.angle), sin(agent.angle));
	float2 position = agent.position + direction * deltaTime * 50;


	uint random = hash(position.y * width + position.x + hash(id.x + deltaTime * 100000));

	// Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (position.x < 0 || position.x >= width || position.y < 0 || position.y >= height) 
	{
		random = hash(random);
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		position.x = min(width - 1, max(0, position.x));
		position.y = min(height - 1, max(0, position.y));
		agents[id.x].angle = randomAngle;
	}
	else 
	{
		float4 oldTrail = trailMap[int2(position)];
		trailMap[int2(position)] = min(1, oldTrail + speed * deltaTime);
	}

	agents[id.x].position = position;
}

#pragma kernel Diffuse

float decayRate = 200;
float diffuseRate = 1;
RWTexture2D<float4> diffusedTrailMap;

[numthreads(8, 8, 1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

	float4 sum = 0;
	float4 originalCol = trailMap[id.xy];
	// 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX++) {
		for (int offsetY = -1; offsetY <= 1; offsetY++) {
			int sampleX = min(width - 1, max(0, id.x + offsetX));
			int sampleY = min(height - 1, max(0, id.y + offsetY));
			sum += trailMap[int2(sampleX, sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	float diffuseWeight = saturate(diffuseRate * deltaTime);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

	//DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
	diffusedTrailMap[id.xy] = max(0, blurredCol - decayRate * deltaTime);

}