#pragma kernel Update

struct Agent {
	float2 position;
	float angle;
};

RWTexture2D<float4> trailMap;

RWStructuredBuffer<Agent> agents;
uint agentsLength;

float time;
float deltaTime;

int width;
int height;
uint speed;
float turnSpeed;

float sensorAngleOffset;
float sensorDistance;
int sensorRadius;

uint hash(uint state)
{
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}

float scaleToRange01(uint state)
{
	return state / 4294967295.0;
}


float sense(Agent agent, float relAngle)
{
	float sensorAngle = agent.angle + relAngle;
	float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

	float2 sensorPos = agent.position + sensorDir * sensorDistance;
	int sensorX = (int)sensorPos.x;
	int sensorY = (int)sensorPos.y;

	int sum = 0;

	for (int offsetX = -sensorRadius; offsetX <= sensorRadius; offsetX++)
	{
		for (int offsetY = -sensorRadius; offsetY <= sensorRadius; offsetY++) 
		{
			int sampleX = min(width - 1, max(0, sensorX + offsetX));
			int sampleY = min(height - 1, max(0, sensorY + offsetY));
			sum += dot(1, trailMap[int2(sampleX, sampleY)]);
			//trailMap[int2(sampleX, sampleY)] = float4(1, 0, 0, 1);
		}
	}

	//trailMap[int2(sensorX, sensorY)] = float4(0, sum, 0, 1);
	return sum;
}


[numthreads(16, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= agentsLength)
		return;

	Agent agent = agents[id.x];


	float2 direction = float2(cos(agent.angle), sin(agent.angle));
	float2 position = agent.position + direction * deltaTime * speed;
	
	uint random = hash(position.y * width + position.x + hash(id.x + time));

	float sensorAngleRad = sensorAngleOffset * (3.1415 / 180);
	float weightForward = sense(agent, 0);
	float weightLeft = sense(agent, sensorAngleRad);
	float weightRight = sense(agent, -sensorAngleRad);

	float randomSteerStrength = scaleToRange01(random);
	float _turnSpeed = turnSpeed * 2 * 3.1415;

	// Continue in same direction
	if (weightForward > weightLeft && weightForward > weightRight) {
		agents[id.x].angle += 0;
	}
	else if (weightForward < weightLeft && weightForward < weightRight) {
		agents[id.x].angle += (randomSteerStrength - 0.5) * 2 * _turnSpeed * deltaTime;
	}
	// Turn right
	else if (weightRight > weightLeft) {
		agents[id.x].angle -= randomSteerStrength * _turnSpeed * deltaTime;
	}
	// Turn left
	else if (weightLeft > weightRight) {
		agents[id.x].angle += randomSteerStrength * _turnSpeed * deltaTime;
	}
	
	// Clamp position to map boundaries, and pick new random move dir if hit boundary
	if (position.x < 0 || position.x >= width || position.y < 0 || position.y >= height) 
	{
		random = hash(random);
		float randomAngle = agent.angle + scaleToRange01(random) * 2 * 3.1415;

		position.x = min(width - 1, max(0, position.x));
		position.y = min(height - 1, max(0, position.y));
		agents[id.x].angle = randomAngle;
	}
	else 
	{
		float4 oldTrail = trailMap[int2(position)];
		trailMap[int2(position)] = min(1, oldTrail + 10 * speed * deltaTime);
		trailMap[int2(position)] = float4(1, 1, 1, 1);
	}

	agents[id.x].position = position;
}

#pragma kernel Diffuse

float decayRate = 200;
float diffuseRate = 1;
RWTexture2D<float4> diffusedTrailMap;

[numthreads(8, 8, 1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height) {
		return;
	}

	float4 sum = 0;
	float4 originalCol = trailMap[id.xy];
	// 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX++) {
		for (int offsetY = -1; offsetY <= 1; offsetY++) {
			int sampleX = min(width - 1, max(0, id.x + offsetX));
			int sampleY = min(height - 1, max(0, id.y + offsetY));
			sum += trailMap[int2(sampleX, sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	float diffuseWeight = saturate(diffuseRate * deltaTime);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

	diffusedTrailMap[id.xy] = max(0, blurredCol - decayRate * deltaTime);
}